
UnitTesting/unitTest_ExportData.py::TestExportUtils::test_positive_html_export 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:04 INFO ------------------------------------------------------
Starting test: test_positive_html_export

2024-10-02 17:15:04 INFO Mocks for os.path, os.makedirs, pandas.to_excel, and open set up successfully.
-------------------------------- live log call --------------------------------
2024-10-02 17:15:04 INFO Result: HTML file saved and updated at ExportedFiles\htmlFiles\test_command.html.
2024-10-02 17:15:04 INFO Test positive HTML export passed successfully.
PASSED                                                                   [  1%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:04 INFO 
Finished test: test_positive_html_export
------------------------------------------------------

UnitTesting/unitTest_ExportData.py::TestExportUtils::test_positive_excel_export 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:04 INFO ------------------------------------------------------
Starting test: test_positive_excel_export

2024-10-02 17:15:04 INFO Mocks for os.path, os.makedirs, pandas.to_excel, and open set up successfully.
-------------------------------- live log call --------------------------------
2024-10-02 17:15:04 INFO Result: Data saved to Excel file at ExportedFiles\excelFiles\test_command.xlsx.
2024-10-02 17:15:04 INFO Test positive Excel export passed successfully.
PASSED                                                                   [  2%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:04 INFO 
Finished test: test_positive_excel_export
------------------------------------------------------

UnitTesting/unitTest_ExportData.py::TestExportUtils::test_negative_html_export 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:04 INFO ------------------------------------------------------
Starting test: test_negative_html_export

2024-10-02 17:15:04 INFO Mocks for os.path, os.makedirs, pandas.to_excel, and open set up successfully.
-------------------------------- live log call --------------------------------
2024-10-02 17:15:04 INFO Expected exception caught: Failed to write HTML
2024-10-02 17:15:04 INFO Test negative HTML export passed with expected exception.
PASSED                                                                   [  4%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:04 INFO 
Finished test: test_negative_html_export
------------------------------------------------------

UnitTesting/unitTest_ExportData.py::TestExportUtils::test_negative_excel_export 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:04 INFO ------------------------------------------------------
Starting test: test_negative_excel_export

2024-10-02 17:15:04 INFO Mocks for os.path, os.makedirs, pandas.to_excel, and open set up successfully.
-------------------------------- live log call --------------------------------
2024-10-02 17:15:04 INFO Expected exception caught: Failed to write Excel
2024-10-02 17:15:04 INFO Test negative Excel export passed with expected exception.
PASSED                                                                   [  5%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:04 INFO 
Finished test: test_negative_excel_export
------------------------------------------------------

UnitTesting/unitTest_add_account.py::TestAccountDAO::test_entity_add_account_success 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:04 INFO ------------------------------------------------------
Starting test: test_entity_add_account_success

2024-10-02 17:15:04 INFO Fake database connection established
-------------------------------- live log call --------------------------------
2024-10-02 17:15:04 INFO AccountDAO.add_account returned True
2024-10-02 17:15:04 INFO Expected result: True
2024-10-02 17:15:04 INFO Test add_account_success passed
PASSED                                                                   [  7%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:04 INFO 
Finished test: test_entity_add_account_success
------------------------------------------------------

UnitTesting/unitTest_add_account.py::TestAccountDAO::test_entity_add_account_fail 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:04 INFO ------------------------------------------------------
Starting test: test_entity_add_account_fail

2024-10-02 17:15:04 INFO Fake database connection established
-------------------------------- live log call --------------------------------
2024-10-02 17:15:04 INFO AccountDAO.add_account returned False
2024-10-02 17:15:04 INFO Expected result: False
2024-10-02 17:15:04 INFO Test add_account_fail passed
PASSED                                                                   [  8%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:04 INFO 
Finished test: test_entity_add_account_fail
------------------------------------------------------

UnitTesting/unitTest_add_account.py::TestAccountControl::test_control_add_account_success 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:04 INFO ------------------------------------------------------
Starting test: test_control_add_account_success

2024-10-02 17:15:04 INFO Mocked AccountDAO connection and close methods
-------------------------------- live log call --------------------------------
2024-10-02 17:15:04 INFO Control method add_account returned: 'Account for example.com added successfully.'
2024-10-02 17:15:04 INFO Expected message: 'Account for example.com added successfully.'
2024-10-02 17:15:04 INFO Test control_add_account_success passed
PASSED                                                                   [ 10%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:04 INFO 
Finished test: test_control_add_account_success
------------------------------------------------------

UnitTesting/unitTest_add_account.py::TestAccountControl::test_control_add_account_fail 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:04 INFO ------------------------------------------------------
Starting test: test_control_add_account_fail

2024-10-02 17:15:04 INFO Mocked AccountDAO connection and close methods
-------------------------------- live log call --------------------------------
2024-10-02 17:15:04 INFO Control method add_account returned: 'Failed to add account for fail.com.'
2024-10-02 17:15:04 INFO Expected message: 'Failed to add account for fail.com.'
2024-10-02 17:15:04 INFO Test control_add_account_fail passed
PASSED                                                                   [ 11%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:04 INFO 
Finished test: test_control_add_account_fail
------------------------------------------------------

UnitTesting/unitTest_check_availability.py::test_check_availability_success 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:04 INFO ------------------------------------------------------
Starting test: test_check_availability_success

-------------------------------- live log call --------------------------------
2024-10-02 17:15:04 INFO Entity Layer Expected: Selected or default date current date is available for booking.
2024-10-02 17:15:04 INFO Entity Layer Received: Selected or default date current date is available for booking.
2024-10-02 17:15:04 INFO Unit Test Passed for entity layer.

2024-10-02 17:15:04 INFO Control Layer Expected: Checked availability: Selected or default date current date is available for booking.
2024-10-02 17:15:04 INFO Control Layer Received: ('Checked availability: Selected or default date current date is available for booking.', 'Data saved to Excel file at ExportedFiles\\excelFiles\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\htmlFiles\\check_availability.html.')
FAILED                                                                   [ 13%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:04 INFO 
Finished test: test_check_availability_success
------------------------------------------------------

UnitTesting/unitTest_check_availability.py::test_check_availability_failure_entity 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:04 INFO ------------------------------------------------------
Starting test: test_check_availability_failure_entity

-------------------------------- live log call --------------------------------
2024-10-02 17:15:04 INFO Control Layer Expected: Failed to check availability: Failed to check availability
2024-10-02 17:15:04 INFO Control Layer Received: ('Failed to check availability: Failed to check availability', 'Data saved to Excel file at ExportedFiles\\excelFiles\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\htmlFiles\\check_availability.html.')
FAILED                                                                   [ 14%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:04 INFO 
Finished test: test_check_availability_failure_entity
------------------------------------------------------

UnitTesting/unitTest_check_availability.py::test_check_availability_no_availability 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:04 INFO ------------------------------------------------------
Starting test: test_check_availability_no_availability

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Entity Layer Received: No availability for the selected date.
2024-10-02 17:15:05 INFO Control Layer Received: ('Checked availability: No availability for the selected date.', 'Data saved to Excel file at ExportedFiles\\excelFiles\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\htmlFiles\\check_availability.html.')
FAILED                                                                   [ 16%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_check_availability_no_availability
------------------------------------------------------

UnitTesting/unitTest_check_availability.py::test_check_availability_failure_control 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_check_availability_failure_control

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Control Layer Expected: Control Layer Exception: Control Layer Failed
2024-10-02 17:15:05 INFO Control Layer Received: Control Layer Exception: Control Layer Failed
2024-10-02 17:15:05 INFO Unit Test Passed for control layer failure.
PASSED                                                                   [ 17%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_check_availability_failure_control
------------------------------------------------------

UnitTesting/unitTest_close_browser.py::test_close_browser_success 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_close_browser_success

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Entity Layer Expected: Browser closed.
2024-10-02 17:15:05 INFO Entity Layer Received: Browser closed.
2024-10-02 17:15:05 INFO Unit Test Passed for entity layer.

2024-10-02 17:15:05 INFO Control Layer Expected: Control Object Result: Browser closed.
2024-10-02 17:15:05 INFO Control Layer Received: Control Object Result: Browser closed.
2024-10-02 17:15:05 INFO Unit Test Passed for control layer.
PASSED                                                                   [ 19%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_close_browser_success
------------------------------------------------------

UnitTesting/unitTest_close_browser.py::test_close_browser_not_open 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_close_browser_not_open

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Entity Layer Expected: No browser is currently open.
2024-10-02 17:15:05 INFO Entity Layer Received: No browser is currently open.
2024-10-02 17:15:05 INFO Unit Test Passed for entity layer.

2024-10-02 17:15:05 INFO Control Layer Expected: Control Object Result: No browser is currently open.
2024-10-02 17:15:05 INFO Control Layer Received: Control Object Result: No browser is currently open.
2024-10-02 17:15:05 INFO Unit Test Passed for control layer.
PASSED                                                                   [ 20%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_close_browser_not_open
------------------------------------------------------

UnitTesting/unitTest_close_browser.py::test_close_browser_failure_control 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_close_browser_failure_control

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Control Layer Expected to Report: Control Layer Exception: Unexpected error
2024-10-02 17:15:05 INFO Control Layer Received: Control Layer Exception: Unexpected error
2024-10-02 17:15:05 INFO Unit Test Passed for control layer error handling.
PASSED                                                                   [ 22%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_close_browser_failure_control
------------------------------------------------------

UnitTesting/unitTest_close_browser.py::test_close_browser_failure_entity 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_close_browser_failure_entity

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Entity Layer Expected Failure: BrowserEntity_Failed to close browser: Internal error
2024-10-02 17:15:05 INFO Control Layer Received: Control Layer Exception: BrowserEntity_Failed to close browser: Internal error
2024-10-02 17:15:05 INFO Unit Test Passed for entity layer error handling.
PASSED                                                                   [ 23%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_close_browser_failure_entity
------------------------------------------------------

UnitTesting/unitTest_delete_account.py::TestAccountDAO::test_entity_delete_account_success 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_entity_delete_account_success

2024-10-02 17:15:05 INFO Fake database connection established
-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO AccountDAO.delete_account returned True
2024-10-02 17:15:05 INFO Expected result: True
2024-10-02 17:15:05 INFO Test delete_account_success passed
PASSED                                                                   [ 25%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_entity_delete_account_success
------------------------------------------------------

UnitTesting/unitTest_delete_account.py::TestAccountDAO::test_entity_delete_account_fail 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_entity_delete_account_fail

2024-10-02 17:15:05 INFO Fake database connection established
-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO AccountDAO.delete_account returned False
2024-10-02 17:15:05 INFO Expected result: False
2024-10-02 17:15:05 INFO Test delete_account_fail passed
PASSED                                                                   [ 26%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_entity_delete_account_fail
------------------------------------------------------

UnitTesting/unitTest_delete_account.py::TestAccountControl::test_control_delete_account_success 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_control_delete_account_success

2024-10-02 17:15:05 INFO Mocked AccountDAO connection and close methods
-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Control method delete_account returned: 'Account with ID 1 deleted successfully.'
2024-10-02 17:15:05 INFO Expected message: 'Account with ID 1 deleted successfully.'
2024-10-02 17:15:05 INFO Test control_delete_account_success passed
PASSED                                                                   [ 28%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_control_delete_account_success
------------------------------------------------------

UnitTesting/unitTest_delete_account.py::TestAccountControl::test_control_delete_account_fail 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_control_delete_account_fail

2024-10-02 17:15:05 INFO Mocked AccountDAO connection and close methods
-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Control method delete_account returned: 'Failed to delete account with ID 9999.'
2024-10-02 17:15:05 INFO Expected message: 'Failed to delete account with ID 9999.'
2024-10-02 17:15:05 INFO Test control_delete_account_fail passed
PASSED                                                                   [ 29%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_control_delete_account_fail
------------------------------------------------------

UnitTesting/unitTest_fetch_account_by_website.py::TestAccountDAOFetchByWebsite::test_entity_fetch_account_success 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_entity_fetch_account_success

2024-10-02 17:15:05 INFO Fake database connection established
-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO AccountDAO.fetch_account_by_website returned ('test_user', 'password123')
2024-10-02 17:15:05 INFO Expected result: ('test_user', 'password123')
2024-10-02 17:15:05 INFO Test fetch_account_success passed
PASSED                                                                   [ 31%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_entity_fetch_account_success
------------------------------------------------------

UnitTesting/unitTest_fetch_account_by_website.py::TestAccountDAOFetchByWebsite::test_entity_fetch_account_fail 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_entity_fetch_account_fail

2024-10-02 17:15:05 INFO Fake database connection established
-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO AccountDAO.fetch_account_by_website returned None
2024-10-02 17:15:05 INFO Expected result: None
2024-10-02 17:15:05 INFO Test fetch_account_fail passed
PASSED                                                                   [ 32%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_entity_fetch_account_fail
------------------------------------------------------

UnitTesting/unitTest_fetch_account_by_website.py::TestAccountControlFetchByWebsite::test_control_fetch_account_success 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_control_fetch_account_success

2024-10-02 17:15:05 INFO Mocked AccountDAO connection and close methods
-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Control method fetch_account_by_website returned: '('test_user', 'password123')'
2024-10-02 17:15:05 INFO Expected message: ('test_user', 'password123')
2024-10-02 17:15:05 INFO Test control_fetch_account_success passed
PASSED                                                                   [ 34%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_control_fetch_account_success
------------------------------------------------------

UnitTesting/unitTest_fetch_account_by_website.py::TestAccountControlFetchByWebsite::test_control_fetch_account_fail 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_control_fetch_account_fail

2024-10-02 17:15:05 INFO Mocked AccountDAO connection and close methods
-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Control method fetch_account_by_website returned: 'No account found for fail.com.'
2024-10-02 17:15:05 INFO Expected message: 'No account found for fail.com.'
2024-10-02 17:15:05 INFO Test control_fetch_account_fail passed
PASSED                                                                   [ 35%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_control_fetch_account_fail
------------------------------------------------------

UnitTesting/unitTest_fetch_all_accounts.py::TestAccountDAO::test_entity_fetch_all_accounts_success 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_entity_fetch_all_accounts_success

2024-10-02 17:15:05 INFO Fake database connection established
-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO AccountDAO.fetch_all_accounts returned [(1, 'test_user', 'password123', 'example.com'), (2, 'test_user2', 'password456', 'example2.com')]
2024-10-02 17:15:05 INFO Expected result: a list of accounts
2024-10-02 17:15:05 INFO Test fetch_all_accounts_success passed
PASSED                                                                   [ 37%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_entity_fetch_all_accounts_success
------------------------------------------------------

UnitTesting/unitTest_fetch_all_accounts.py::TestAccountDAO::test_entity_fetch_all_accounts_fail 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_entity_fetch_all_accounts_fail

2024-10-02 17:15:05 INFO Fake database connection established
-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO AccountDAO.fetch_all_accounts returned []
2024-10-02 17:15:05 INFO Expected result: an empty list due to failure
2024-10-02 17:15:05 INFO Test fetch_all_accounts_fail passed
PASSED                                                                   [ 38%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_entity_fetch_all_accounts_fail
------------------------------------------------------

UnitTesting/unitTest_fetch_all_accounts.py::TestAccountControl::test_control_fetch_all_accounts_success 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_control_fetch_all_accounts_success

2024-10-02 17:15:05 INFO Mocked AccountDAO connection and close methods
-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Control method fetch_all_accounts returned: 'Accounts:
ID: 1, Username: test_user, Password: password123, Website: example.com
ID: 2, Username: test_user2, Password: password456, Website: example2.com'
2024-10-02 17:15:05 INFO Expected message: 'Accounts:
ID: 1, Username: test_user, Password: password123, Website: example.com
ID: 2, Username: test_user2, Password: password456, Website: example2.com'
2024-10-02 17:15:05 INFO Test control_fetch_all_accounts_success passed
PASSED                                                                   [ 40%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_control_fetch_all_accounts_success
------------------------------------------------------

UnitTesting/unitTest_fetch_all_accounts.py::TestAccountControl::test_control_fetch_all_accounts_fail 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_control_fetch_all_accounts_fail

2024-10-02 17:15:05 INFO Mocked AccountDAO connection and close methods
-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Control method fetch_all_accounts returned: 'No accounts found.'
2024-10-02 17:15:05 INFO Expected message: 'No accounts found.'
2024-10-02 17:15:05 INFO Test control_fetch_all_accounts_fail passed
PASSED                                                                   [ 41%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_control_fetch_all_accounts_fail
------------------------------------------------------

UnitTesting/unitTest_get_price.py::test_get_price_success 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_get_price_success

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Entity Layer Expected: $199.99
2024-10-02 17:15:05 INFO Entity Layer Received: $199.99
2024-10-02 17:15:05 INFO Unit Test Passed for entity layer.

2024-10-02 17:15:05 INFO Control Layer Expected: $199.99
2024-10-02 17:15:05 INFO Control Layer Received: ('$199.99', 'Data saved to Excel file at ExportedFiles\\excelFiles\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\htmlFiles\\check_availability.html.')
FAILED                                                                   [ 43%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_get_price_success
------------------------------------------------------

UnitTesting/unitTest_get_price.py::test_get_price_invalid_url 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_get_price_invalid_url

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Control Layer Expected: Error fetching price: Invalid URL
2024-10-02 17:15:05 INFO Control Layer Received: ('Error fetching price: Invalid URL', 'Data saved to Excel file at ExportedFiles\\excelFiles\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\htmlFiles\\check_availability.html.')
FAILED                                                                   [ 44%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_get_price_invalid_url
------------------------------------------------------

UnitTesting/unitTest_get_price.py::test_get_price_failure_entity 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_get_price_failure_entity

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Control Layer Expected: Failed to fetch price: Failed to fetch price
2024-10-02 17:15:05 INFO Control Layer Received: Failed to fetch price: Failed to fetch price
2024-10-02 17:15:05 INFO Unit Test Passed for entity layer error handling.
PASSED                                                                   [ 46%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_get_price_failure_entity
------------------------------------------------------

UnitTesting/unitTest_get_price.py::test_get_price_failure_control 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_get_price_failure_control

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Control Layer Expected: Control Layer Exception: Control Layer Failed
2024-10-02 17:15:05 INFO Control Layer Received: Control Layer Exception: Control Layer Failed
2024-10-02 17:15:05 INFO Unit Test Passed for control layer failure.
PASSED                                                                   [ 47%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_get_price_failure_control
------------------------------------------------------

UnitTesting/unitTest_launch_browser.py::test_launch_browser_success 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_launch_browser_success

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Entity Layer Expected: Browser launched.
2024-10-02 17:15:05 INFO Entity Layer Received: Browser launched.
2024-10-02 17:15:05 INFO Unit Test Passed for entity layer.

2024-10-02 17:15:05 INFO Control Layer Expected: Control Object Result: Browser launched.
2024-10-02 17:15:05 INFO Control Layer Received: Control Object Result: Browser launched.
2024-10-02 17:15:05 INFO Unit Test Passed for control layer.
PASSED                                                                   [ 49%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_launch_browser_success
------------------------------------------------------

UnitTesting/unitTest_launch_browser.py::test_launch_browser_already_running 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_launch_browser_already_running

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Entity Layer Expected: Browser is already running.
2024-10-02 17:15:05 INFO Entity Layer Received: Browser is already running.
2024-10-02 17:15:05 INFO Unit Test Passed for entity layer.

2024-10-02 17:15:05 INFO Control Layer Expected: Control Object Result: Browser is already running.
2024-10-02 17:15:05 INFO Control Layer Received: Control Object Result: Browser is already running.
2024-10-02 17:15:05 INFO Unit Test Passed for control layer.
PASSED                                                                   [ 50%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_launch_browser_already_running
------------------------------------------------------

UnitTesting/unitTest_launch_browser.py::test_launch_browser_failure_control 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_launch_browser_failure_control

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Control Layer Expected to Report: Control Layer Exception: Internal error
2024-10-02 17:15:05 INFO Control Layer Received: Control Layer Exception: Internal error
2024-10-02 17:15:05 INFO Unit Test Passed for control layer error handling.
PASSED                                                                   [ 52%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_launch_browser_failure_control
------------------------------------------------------

UnitTesting/unitTest_launch_browser.py::test_launch_browser_failure_entity 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_launch_browser_failure_entity

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Entity Layer Expected Failure: Failed to launch browser: Internal error
2024-10-02 17:15:05 INFO Control Layer Received: Control Layer Exception: Failed to launch browser: Internal error
2024-10-02 17:15:05 INFO Unit Test Passed for entity layer error handling.
PASSED                                                                   [ 53%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_launch_browser_failure_entity
------------------------------------------------------

UnitTesting/unitTest_login.py::test_login_success 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_login_success

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Entity Layer Expected: Logged in to http://example.com successfully with username: sample_username
2024-10-02 17:15:05 INFO Entity Layer Received: Logged in to http://example.com successfully with username: sample_username
2024-10-02 17:15:05 INFO Unit Test Passed for entity layer.

2024-10-02 17:15:05 INFO Control Layer Expected: Control Object Result: Logged in to http://example.com successfully with username: sample_username
2024-10-02 17:15:05 INFO Control Layer Received: Control Object Result: Logged in to http://example.com successfully with username: sample_username
2024-10-02 17:15:05 INFO Unit Test Passed for control layer.
PASSED                                                                   [ 55%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_login_success
------------------------------------------------------

UnitTesting/unitTest_login.py::test_login_no_account 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_login_no_account

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Control Layer Expected: No account found for example.com
2024-10-02 17:15:05 INFO Control Layer Received: No account found for example.com
2024-10-02 17:15:05 INFO Unit Test Passed for missing account handling.
PASSED                                                                   [ 56%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_login_no_account
------------------------------------------------------

UnitTesting/unitTest_login.py::test_login_entity_layer_failure 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_login_entity_layer_failure

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Control Layer Expected: Control Layer Exception: BrowserEntity_Failed to log in to http://example.com: Internal error
2024-10-02 17:15:05 INFO Control Layer Received: Control Layer Exception: BrowserEntity_Failed to log in to http://example.com: Internal error
2024-10-02 17:15:05 INFO Unit Test Passed for entity layer failure.
PASSED                                                                   [ 58%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_login_entity_layer_failure
------------------------------------------------------

UnitTesting/unitTest_login.py::test_login_control_layer_failure 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_login_control_layer_failure

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Control Layer Expected: Control Layer Exception: Control layer failure during account fetch.
2024-10-02 17:15:05 INFO Control Layer Received: Control Layer Exception: Control layer failure during account fetch.
2024-10-02 17:15:05 INFO Unit Test Passed for control layer failure handling.
PASSED                                                                   [ 59%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_login_control_layer_failure
------------------------------------------------------

UnitTesting/unitTest_login.py::test_login_invalid_url 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_login_invalid_url

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Control Layer Expected: URL for example not found.
2024-10-02 17:15:05 INFO Control Layer Received: URL for example not found.
2024-10-02 17:15:05 INFO Unit Test Passed for missing URL/selector handling.
PASSED                                                                   [ 61%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_login_invalid_url
------------------------------------------------------

UnitTesting/unitTest_navigate_to_website.py::test_navigate_to_website_success 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_navigate_to_website_success

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Entity Layer Expected: Navigated to https://example.com
2024-10-02 17:15:05 INFO Entity Layer Received: Navigated to https://example.com
2024-10-02 17:15:05 INFO Unit Test Passed for entity layer.

2024-10-02 17:15:05 INFO Control Layer Expected: Control Object Result: Navigated to https://example.com
2024-10-02 17:15:05 INFO Control Layer Received: Control Object Result: Navigated to https://example.com
2024-10-02 17:15:05 INFO Unit Test Passed for control layer.
PASSED                                                                   [ 62%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_navigate_to_website_success
------------------------------------------------------

UnitTesting/unitTest_navigate_to_website.py::test_navigate_to_website_invalid_url 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_navigate_to_website_invalid_url

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Control Layer Expected: URL for invalid_site not found.
2024-10-02 17:15:05 INFO Control Layer Received: URL for invalid_site not found.
2024-10-02 17:15:05 INFO Unit Test Passed for control layer invalid URL handling.

PASSED                                                                   [ 64%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_navigate_to_website_invalid_url
------------------------------------------------------

UnitTesting/unitTest_navigate_to_website.py::test_navigate_to_website_failure_entity 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_navigate_to_website_failure_entity

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Control Layer Expected: Control Layer Exception: Failed to navigate
2024-10-02 17:15:05 INFO Control Layer Received: Control Layer Exception: Failed to navigate
2024-10-02 17:15:05 INFO Unit Test Passed for entity layer error handling.
PASSED                                                                   [ 65%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_navigate_to_website_failure_entity
------------------------------------------------------

UnitTesting/unitTest_navigate_to_website.py::test_navigate_to_website_launch_browser_on_failure 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_navigate_to_website_launch_browser_on_failure

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Control Layer Expected: Control Object Result: Navigated to https://example.com
2024-10-02 17:15:05 INFO Control Layer Received: Control Object Result: Navigated to https://example.com
2024-10-02 17:15:05 INFO Unit Test Passed for control layer with browser launch.

PASSED                                                                   [ 67%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_navigate_to_website_launch_browser_on_failure
------------------------------------------------------

UnitTesting/unitTest_navigate_to_website.py::test_navigate_to_website_failure_control 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_navigate_to_website_failure_control

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Control Layer Expected: Control Layer Exception: Control Layer Failed
2024-10-02 17:15:05 INFO Control Layer Received: Control Layer Exception: Control Layer Failed
2024-10-02 17:15:05 INFO Unit Test Passed for control layer failure.
PASSED                                                                   [ 68%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_navigate_to_website_failure_control
------------------------------------------------------

UnitTesting/unitTest_project_help.py::test_project_help_success 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_project_help_success

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Control Layer Expected: Here are the available commands:
!project_help - Get help on available commands.
!fetch_all_accounts - Fetch all stored accounts.
!add_account 'username' 'password' 'website' - Add a new account to the database.
!fetch_account_by_website 'website' - Fetch account details by website.
!delete_account 'account_id' - Delete an account by its ID.
!launch_browser - Launch the browser.
!close_browser - Close the browser.
!navigate_to_website 'url' - Navigate to a specified website.
!login 'website' - Log in to a website (e.g., !login bestbuy).
!get_price 'url' - Check the price of a product on a specified website.
!start_monitoring_price 'url' 'frequency' - Start monitoring a product's price at a specific interval (frequency in minutes).
!stop_monitoring_price - Stop monitoring the product's price.
!check_availability 'url' - Check availability for a restaurant or service.
!start_monitoring_availability 'url' 'frequency' - Monitor availability at a specific interval.
!stop_monitoring_availability - Stop monitoring availability.
!stop_bot - Stop the bot.

2024-10-02 17:15:05 INFO Control Layer Received: Here are the available commands:
!project_help - Get help on available commands.
!fetch_all_accounts - Fetch all stored accounts.
!add_account 'username' 'password' 'website' - Add a new account to the database.
!fetch_account_by_website 'website' - Fetch account details by website.
!delete_account 'account_id' - Delete an account by its ID.
!launch_browser - Launch the browser.
!close_browser - Close the browser.
!navigate_to_website 'url' - Navigate to a specified website.
!login 'website' - Log in to a website (e.g., !login bestbuy).
!get_price 'url' - Check the price of a product on a specified website.
!start_monitoring_price 'url' 'frequency' - Start monitoring a product's price at a specific interval (frequency in minutes).
!stop_monitoring_price - Stop monitoring the product's price.
!check_availability 'url' - Check availability for a restaurant or service.
!start_monitoring_availability 'url' 'frequency' - Monitor availability at a specific interval.
!stop_monitoring_availability - Stop monitoring availability.
!stop_bot - Stop the bot.

2024-10-02 17:15:05 INFO Unit Test Passed for project help.

PASSED                                                                   [ 70%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_project_help_success
------------------------------------------------------

UnitTesting/unitTest_project_help.py::test_project_help_failure 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_project_help_failure

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Control Layer Expected: Error handling help command: Error handling help command
2024-10-02 17:15:05 INFO Control Layer Received: Error handling help command: Error handling help command
2024-10-02 17:15:05 INFO Unit Test Passed for error handling in project help.

PASSED                                                                   [ 71%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_project_help_failure
------------------------------------------------------

UnitTesting/unitTest_receive_email.py::TestEmailDAO::test_utility_send_email_success 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_utility_send_email_success

2024-10-02 17:15:05 INFO Mocked EmailDAO with send_email_with_attachments method
-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Test send_email_success passed
PASSED                                                                   [ 73%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_utility_send_email_success
------------------------------------------------------

UnitTesting/unitTest_receive_email.py::TestEmailDAO::test_utility_send_email_fail 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_utility_send_email_fail

2024-10-02 17:15:05 INFO Mocked EmailDAO with send_email_with_attachments method
-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Test send_email_fail passed
PASSED                                                                   [ 74%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_utility_send_email_fail
------------------------------------------------------

UnitTesting/unitTest_receive_email.py::TestEmailControl::test_control_send_email_success 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_control_send_email_success

2024-10-02 17:15:05 INFO Mocked EmailControl (BotControl) for control layer
-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Test control_send_email_success passed
PASSED                                                                   [ 76%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_control_send_email_success
------------------------------------------------------

UnitTesting/unitTest_receive_email.py::TestEmailControl::test_control_send_email_fail 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_control_send_email_fail

2024-10-02 17:15:05 INFO Mocked EmailControl (BotControl) for control layer
-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Test control_send_email_fail passed
PASSED                                                                   [ 77%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:05 INFO 
Finished test: test_control_send_email_fail
------------------------------------------------------

UnitTesting/unitTest_start_monitoring_availability.py::test_start_monitoring_availability_success 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:05 INFO ------------------------------------------------------
Starting test: test_start_monitoring_availability_success

-------------------------------- live log call --------------------------------
2024-10-02 17:15:05 INFO Monitoring Iteration: ('Checked availability: Selected or default date is available for booking.', 'Data saved to Excel file at ExportedFiles\\excelFiles\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\htmlFiles\\check_availability.html.')
2024-10-02 17:15:06 INFO Control Layer Expected: [('Checked availability: Selected or default date is available for booking.', 'Data saved to Excel file at ExportedFiles\\excelFiles\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\htmlFiles\\check_availability.html.'), 'Monitoring stopped successfully!']
2024-10-02 17:15:06 INFO Control Layer Received: [('Checked availability: Selected or default date is available for booking.', 'Data saved to Excel file at ExportedFiles\\excelFiles\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\htmlFiles\\check_availability.html.'), 'Monitoring stopped successfully!']
2024-10-02 17:15:06 INFO Unit Test Passed for control layer.
PASSED                                                                   [ 79%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:06 INFO 
Finished test: test_start_monitoring_availability_success
------------------------------------------------------

UnitTesting/unitTest_start_monitoring_availability.py::test_start_monitoring_availability_failure_entity 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:06 INFO ------------------------------------------------------
Starting test: test_start_monitoring_availability_failure_entity

-------------------------------- live log call --------------------------------
2024-10-02 17:15:06 INFO Monitoring Iteration: ('Failed to check availability: Failed to check availability', 'Data saved to Excel file at ExportedFiles\\excelFiles\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\htmlFiles\\check_availability.html.')
2024-10-02 17:15:07 INFO Control Layer Expected: [('Failed to check availability: Failed to check availability', 'Data saved to Excel file at ExportedFiles\\excelFiles\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\htmlFiles\\check_availability.html.'), 'Monitoring stopped successfully!']
2024-10-02 17:15:07 INFO Control Layer Received: [('Failed to check availability: Failed to check availability', 'Data saved to Excel file at ExportedFiles\\excelFiles\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\htmlFiles\\check_availability.html.'), 'Monitoring stopped successfully!']
2024-10-02 17:15:07 INFO Unit Test Passed for entity layer error handling.
PASSED                                                                   [ 80%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:07 INFO 
Finished test: test_start_monitoring_availability_failure_entity
------------------------------------------------------

UnitTesting/unitTest_start_monitoring_availability.py::test_start_monitoring_availability_failure_control 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:07 INFO ------------------------------------------------------
Starting test: test_start_monitoring_availability_failure_control

-------------------------------- live log call --------------------------------
2024-10-02 17:15:07 INFO Control Layer Expected: Control Layer Exception: Control Layer Failed
2024-10-02 17:15:07 INFO Control Layer Received: Control Layer Exception: Control Layer Failed
2024-10-02 17:15:07 INFO Unit Test Passed for control layer failure.
PASSED                                                                   [ 82%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:07 INFO 
Finished test: test_start_monitoring_availability_failure_control
------------------------------------------------------

UnitTesting/unitTest_start_monitoring_availability.py::test_start_monitoring_availability_already_running 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:07 INFO ------------------------------------------------------
Starting test: test_start_monitoring_availability_already_running

-------------------------------- live log call --------------------------------
2024-10-02 17:15:07 INFO Control Layer Expected: Already monitoring availability.
2024-10-02 17:15:07 INFO Control Layer Received: Already monitoring availability.
2024-10-02 17:15:07 INFO Unit Test Passed for control layer already running handling.

PASSED                                                                   [ 83%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:07 INFO 
Finished test: test_start_monitoring_availability_already_running
------------------------------------------------------

UnitTesting/unitTest_start_monitoring_price.py::test_start_monitoring_price_success 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:07 INFO ------------------------------------------------------
Starting test: test_start_monitoring_price_success

-------------------------------- live log call --------------------------------
2024-10-02 17:15:07 INFO Entity Layer Expected: Starting price monitoring. Current price: 100 USD
2024-10-02 17:15:07 INFO Control Layer Received: Starting price monitoring. Current price: ('100 USD', 'Data saved to Excel file at ExportedFiles\\excelFiles\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\htmlFiles\\check_availability.html.')
FAILED                                                                   [ 85%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:07 INFO 
Finished test: test_start_monitoring_price_success
------------------------------------------------------

UnitTesting/unitTest_start_monitoring_price.py::test_start_monitoring_price_already_running 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:07 INFO ------------------------------------------------------
Starting test: test_start_monitoring_price_already_running

-------------------------------- live log call --------------------------------
2024-10-02 17:15:07 INFO Control Layer Expected: Already monitoring prices.
2024-10-02 17:15:07 INFO Control Layer Received: Already monitoring prices.
2024-10-02 17:15:07 INFO Unit Test Passed for already running scenario.

PASSED                                                                   [ 86%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:07 INFO 
Finished test: test_start_monitoring_price_already_running
------------------------------------------------------

UnitTesting/unitTest_start_monitoring_price.py::test_start_monitoring_price_failure_in_entity 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:07 INFO ------------------------------------------------------
Starting test: test_start_monitoring_price_failure_in_entity

-------------------------------- live log call --------------------------------
2024-10-02 17:15:07 INFO Control Layer Expected: Starting price monitoring. Current price: Failed to fetch price: Error fetching price
2024-10-02 17:15:07 INFO Control Layer Received: Starting price monitoring. Current price: Failed to fetch price: Error fetching price
2024-10-02 17:15:07 INFO Unit Test Passed for entity layer failure scenario.

PASSED                                                                   [ 88%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:07 INFO 
Finished test: test_start_monitoring_price_failure_in_entity
------------------------------------------------------

UnitTesting/unitTest_start_monitoring_price.py::test_start_monitoring_price_failure_in_control 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:07 INFO ------------------------------------------------------
Starting test: test_start_monitoring_price_failure_in_control

-------------------------------- live log call --------------------------------
2024-10-02 17:15:07 INFO Control Layer Expected: Control Layer Exception
2024-10-02 17:15:07 INFO Control Layer Received: Control Layer Exception: Control Layer Exception
2024-10-02 17:15:07 INFO Unit Test Passed for control layer failure scenario.

PASSED                                                                   [ 89%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:07 INFO 
Finished test: test_start_monitoring_price_failure_in_control
------------------------------------------------------

UnitTesting/unitTest_stop_bot.py::test_stop_bot_success 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:07 INFO ------------------------------------------------------
Starting test: test_stop_bot_success

-------------------------------- live log call --------------------------------
2024-10-02 17:15:07 INFO Control Layer Expected: Bot has been shut down.
2024-10-02 17:15:07 INFO Control Layer Received: Bot has been shut down.
2024-10-02 17:15:07 INFO Unit Test Passed for control layer stop bot.

PASSED                                                                   [ 91%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:07 INFO 
Finished test: test_stop_bot_success
------------------------------------------------------

UnitTesting/unitTest_stop_bot.py::test_stop_bot_failure_control 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:07 INFO ------------------------------------------------------
Starting test: test_stop_bot_failure_control

-------------------------------- live log call --------------------------------
2024-10-02 17:15:07 INFO Control Layer Expected: Control Layer Exception: Control Layer Failed
2024-10-02 17:15:07 INFO Control Layer Received: Control Layer Exception: Control Layer Failed
2024-10-02 17:15:07 INFO Unit Test Passed for control layer failure.

PASSED                                                                   [ 92%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:07 INFO 
Finished test: test_stop_bot_failure_control
------------------------------------------------------

UnitTesting/unitTest_stop_monitoring_availability.py::test_stop_monitoring_availability_success 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:07 INFO ------------------------------------------------------
Starting test: test_stop_monitoring_availability_success

-------------------------------- live log call --------------------------------
2024-10-02 17:15:07 INFO Control Layer Expected to contain: Monitoring stopped successfully!
2024-10-02 17:15:07 INFO Control Layer Received: Results for availability monitoring:
Checked availability: Selected or default date is available for booking.

Monitoring stopped successfully!
2024-10-02 17:15:07 INFO Unit Test Passed for stop monitoring availability.
PASSED                                                                   [ 94%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:07 INFO 
Finished test: test_stop_monitoring_availability_success
------------------------------------------------------

UnitTesting/unitTest_stop_monitoring_availability.py::test_stop_monitoring_availability_no_active_session 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:07 INFO ------------------------------------------------------
Starting test: test_stop_monitoring_availability_no_active_session

-------------------------------- live log call --------------------------------
2024-10-02 17:15:07 INFO Control Layer Expected: There was no active availability monitoring session. Nothing to stop.
2024-10-02 17:15:07 INFO Control Layer Received: There was no active availability monitoring session. Nothing to stop.
2024-10-02 17:15:07 INFO Unit Test Passed for stop monitoring with no active session.
PASSED                                                                   [ 95%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:07 INFO 
Finished test: test_stop_monitoring_availability_no_active_session
------------------------------------------------------

UnitTesting/unitTest_stop_monitoring_price.py::test_stop_monitoring_price_success 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:07 INFO ------------------------------------------------------
Starting test: test_stop_monitoring_price_success

-------------------------------- live log call --------------------------------
2024-10-02 17:15:07 INFO Control Layer Expected: Results for price monitoring:
Price went up!
Price went down!

Price monitoring stopped successfully!
2024-10-02 17:15:07 INFO Control Layer Received: Results for price monitoring:
Price went up!
Price went down!

Price monitoring stopped successfully!
2024-10-02 17:15:07 INFO Unit Test Passed for stop_monitoring_price success scenario.

PASSED                                                                   [ 97%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:07 INFO 
Finished test: test_stop_monitoring_price_success
------------------------------------------------------

UnitTesting/unitTest_stop_monitoring_price.py::test_stop_monitoring_price_not_active 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:07 INFO ------------------------------------------------------
Starting test: test_stop_monitoring_price_not_active

-------------------------------- live log call --------------------------------
2024-10-02 17:15:07 INFO Control Layer Expected: There was no active price monitoring session. Nothing to stop.
2024-10-02 17:15:07 INFO Control Layer Received: There was no active price monitoring session. Nothing to stop.
2024-10-02 17:15:07 INFO Unit Test Passed for stop_monitoring_price when not active.

PASSED                                                                   [ 98%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:07 INFO 
Finished test: test_stop_monitoring_price_not_active
------------------------------------------------------

UnitTesting/unitTest_stop_monitoring_price.py::test_stop_monitoring_price_failure_in_control 
------------------------------- live log setup --------------------------------
2024-10-02 17:15:07 INFO ------------------------------------------------------
Starting test: test_stop_monitoring_price_failure_in_control

-------------------------------- live log call --------------------------------
2024-10-02 17:15:07 INFO Control Layer Expected: Error stopping price monitoring
2024-10-02 17:15:07 INFO Control Layer Received: Error stopping price monitoring
2024-10-02 17:15:07 INFO Unit Test Passed for stop_monitoring_price failure scenario.

PASSED                                                                   [100%]
------------------------------ live log teardown ------------------------------
2024-10-02 17:15:07 INFO 
Finished test: test_stop_monitoring_price_failure_in_control
------------------------------------------------------


================================== FAILURES ===================================
_______________________ test_check_availability_success _______________________

base_test_case = <MagicMock id='377617440'>

    async def test_check_availability_success(base_test_case):
        with patch('entity.AvailabilityEntity.AvailabilityEntity.check_availability') as mock_check:
            url = "https://example.com"
            mock_check.return_value = f"Selected or default date current date is available for booking."
            expected_entity_result = f"Selected or default date current date is available for booking."
            expected_control_result = f"Checked availability: Selected or default date current date is available for booking."
    
            # Execute the command
            result = await base_test_case.availability_control.receive_command("check_availability", url)
    
            # Log and assert the outcomes
            logging.info(f"Entity Layer Expected: {expected_entity_result}")
            logging.info(f"Entity Layer Received: {mock_check.return_value}")
            assert mock_check.return_value == expected_entity_result, "Entity layer assertion failed."
            logging.info("Unit Test Passed for entity layer.\n")
    
            logging.info(f"Control Layer Expected: {expected_control_result}")
            logging.info(f"Control Layer Received: {result}")
>           assert result == expected_control_result, "Control layer assertion failed."
E           AssertionError: Control layer assertion failed.
E           assert ('Checked availability: Selected or default date current date is available for booking.', 'Data saved to Excel file at ExportedFiles\\excelFiles\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\htmlFiles\\check_availability.html.') == 'Checked availability: Selected or default date current date is available for booking.'

UnitTesting\unitTest_check_availability.py:28: AssertionError
----------------------------- Captured log setup ------------------------------
INFO     root:test_init.py:58 ------------------------------------------------------
Starting test: test_check_availability_success
---------------------------- Captured stdout call -----------------------------
Data received from boundary: check_availability
Checking availability...
Checked availability: Selected or default date current date is available for booking.
Data saved to Excel file at ExportedFiles\excelFiles\check_availability.xlsx.
HTML file saved and updated at ExportedFiles\htmlFiles\check_availability.html.
------------------------------ Captured log call ------------------------------
INFO     root:unitTest_check_availability.py:21 Entity Layer Expected: Selected or default date current date is available for booking.
INFO     root:unitTest_check_availability.py:22 Entity Layer Received: Selected or default date current date is available for booking.
INFO     root:unitTest_check_availability.py:24 Unit Test Passed for entity layer.

INFO     root:unitTest_check_availability.py:26 Control Layer Expected: Checked availability: Selected or default date current date is available for booking.
INFO     root:unitTest_check_availability.py:27 Control Layer Received: ('Checked availability: Selected or default date current date is available for booking.', 'Data saved to Excel file at ExportedFiles\\excelFiles\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\htmlFiles\\check_availability.html.')
---------------------------- Captured log teardown ----------------------------
INFO     root:test_init.py:64 
Finished test: test_check_availability_success
------------------------------------------------------
___________________ test_check_availability_failure_entity ____________________

base_test_case = <MagicMock id='377763792'>

    async def test_check_availability_failure_entity(base_test_case):
        with patch('entity.AvailabilityEntity.AvailabilityEntity.check_availability', side_effect=Exception("Failed to check availability")) as mock_check:
            url = "https://example.com"
            expected_control_result = "Failed to check availability: Failed to check availability"
    
            # Execute the command
            result = await base_test_case.availability_control.receive_command("check_availability", url)
    
            # Log and assert the outcomes
            logging.info(f"Control Layer Expected: {expected_control_result}")
            logging.info(f"Control Layer Received: {result}")
>           assert result == expected_control_result, "Control layer failed to handle entity error correctly."
E           AssertionError: Control layer failed to handle entity error correctly.
E           assert ('Failed to check availability: Failed to check availability', 'Data saved to Excel file at ExportedFiles\\excelFiles\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\htmlFiles\\check_availability.html.') == 'Failed to check availability: Failed to check availability'

UnitTesting\unitTest_check_availability.py:43: AssertionError
----------------------------- Captured log setup ------------------------------
INFO     root:test_init.py:58 ------------------------------------------------------
Starting test: test_check_availability_failure_entity
---------------------------- Captured stdout call -----------------------------
Data received from boundary: check_availability
Checking availability...
Failed to check availability: Failed to check availability
Data saved to Excel file at ExportedFiles\excelFiles\check_availability.xlsx.
HTML file saved and updated at ExportedFiles\htmlFiles\check_availability.html.
------------------------------ Captured log call ------------------------------
INFO     root:unitTest_check_availability.py:41 Control Layer Expected: Failed to check availability: Failed to check availability
INFO     root:unitTest_check_availability.py:42 Control Layer Received: ('Failed to check availability: Failed to check availability', 'Data saved to Excel file at ExportedFiles\\excelFiles\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\htmlFiles\\check_availability.html.')
---------------------------- Captured log teardown ----------------------------
INFO     root:test_init.py:64 
Finished test: test_check_availability_failure_entity
------------------------------------------------------
___________________ test_check_availability_no_availability ___________________

base_test_case = <MagicMock id='384370400'>

    async def test_check_availability_no_availability(base_test_case):
        with patch('entity.AvailabilityEntity.AvailabilityEntity.check_availability') as mock_check:
            url = "https://example.com"
            mock_check.return_value = "No availability for the selected date."
            expected_control_result = "Checked availability: No availability for the selected date."
    
            # Execute the command
            result = await base_test_case.availability_control.receive_command("check_availability", url)
    
            # Log and assert the outcomes
            logging.info(f"Entity Layer Received: {mock_check.return_value}")
            logging.info(f"Control Layer Received: {result}")
>           assert result == expected_control_result, "Control layer failed to handle no availability scenario."
E           AssertionError: Control layer failed to handle no availability scenario.
E           assert ('Checked availability: No availability for the selected date.', 'Data saved to Excel file at ExportedFiles\\excelFiles\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\htmlFiles\\check_availability.html.') == 'Checked availability: No availability for the selected date.'

UnitTesting\unitTest_check_availability.py:59: AssertionError
----------------------------- Captured log setup ------------------------------
INFO     root:test_init.py:58 ------------------------------------------------------
Starting test: test_check_availability_no_availability
---------------------------- Captured stdout call -----------------------------
Data received from boundary: check_availability
Checking availability...
Checked availability: No availability for the selected date.
Data saved to Excel file at ExportedFiles\excelFiles\check_availability.xlsx.
HTML file saved and updated at ExportedFiles\htmlFiles\check_availability.html.
------------------------------ Captured log call ------------------------------
INFO     root:unitTest_check_availability.py:57 Entity Layer Received: No availability for the selected date.
INFO     root:unitTest_check_availability.py:58 Control Layer Received: ('Checked availability: No availability for the selected date.', 'Data saved to Excel file at ExportedFiles\\excelFiles\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\htmlFiles\\check_availability.html.')
---------------------------- Captured log teardown ----------------------------
INFO     root:test_init.py:64 
Finished test: test_check_availability_no_availability
------------------------------------------------------
___________________________ test_get_price_success ____________________________

base_test_case = <MagicMock id='386080432'>

    async def test_get_price_success(base_test_case):
        # Simulate a successful price retrieval
        with patch('entity.PriceEntity.PriceEntity.get_price_from_page') as mock_get_price:
            url = "https://example.com/product"
            mock_get_price.return_value = "$199.99"
            expected_entity_result = "$199.99"
            expected_control_result = "$199.99"
    
            # Execute the command
            result = await base_test_case.price_control.receive_command("get_price", url)
    
            # Log and assert the outcomes
            logging.info(f"Entity Layer Expected: {expected_entity_result}")
            logging.info(f"Entity Layer Received: {mock_get_price.return_value}")
            assert mock_get_price.return_value == expected_entity_result, "Entity layer assertion failed."
            logging.info("Unit Test Passed for entity layer.\n")
    
            logging.info(f"Control Layer Expected: {expected_control_result}")
            logging.info(f"Control Layer Received: {result}")
>           assert result == expected_control_result, "Control layer assertion failed."
E           AssertionError: Control layer assertion failed.
E           assert ('$199.99', 'Data saved to Excel file at ExportedFiles\\excelFiles\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\htmlFiles\\check_availability.html.') == '$199.99'

UnitTesting\unitTest_get_price.py:28: AssertionError
----------------------------- Captured log setup ------------------------------
INFO     root:test_init.py:58 ------------------------------------------------------
Starting test: test_get_price_success
---------------------------- Captured stdout call -----------------------------
Data received from boundary: get_price
getting price...
Price found: $199.99
Data saved to Excel file at ExportedFiles\excelFiles\check_availability.xlsx.
HTML file saved and updated at ExportedFiles\htmlFiles\check_availability.html.
------------------------------ Captured log call ------------------------------
INFO     root:unitTest_get_price.py:21 Entity Layer Expected: $199.99
INFO     root:unitTest_get_price.py:22 Entity Layer Received: $199.99
INFO     root:unitTest_get_price.py:24 Unit Test Passed for entity layer.

INFO     root:unitTest_get_price.py:26 Control Layer Expected: $199.99
INFO     root:unitTest_get_price.py:27 Control Layer Received: ('$199.99', 'Data saved to Excel file at ExportedFiles\\excelFiles\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\htmlFiles\\check_availability.html.')
---------------------------- Captured log teardown ----------------------------
INFO     root:test_init.py:64 
Finished test: test_get_price_success
------------------------------------------------------
_________________________ test_get_price_invalid_url __________________________

base_test_case = <MagicMock id='385994000'>

    async def test_get_price_invalid_url(base_test_case):
        # Simulate an invalid URL case
        with patch('entity.PriceEntity.PriceEntity.get_price_from_page') as mock_get_price:
            invalid_url = "invalid_url"
            mock_get_price.return_value = "Error fetching price: Invalid URL"
            expected_control_result = "Error fetching price: Invalid URL"
    
            # Execute the command
            result = await base_test_case.price_control.receive_command("get_price", invalid_url)
    
            # Log and assert the outcomes
            logging.info(f"Control Layer Expected: {expected_control_result}")
            logging.info(f"Control Layer Received: {result}")
>           assert result == expected_control_result, "Control layer assertion failed."
E           AssertionError: Control layer assertion failed.
E           assert ('Error fetching price: Invalid URL', 'Data saved to Excel file at ExportedFiles\\excelFiles\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\htmlFiles\\check_availability.html.') == 'Error fetching price: Invalid URL'

UnitTesting\unitTest_get_price.py:44: AssertionError
----------------------------- Captured log setup ------------------------------
INFO     root:test_init.py:58 ------------------------------------------------------
Starting test: test_get_price_invalid_url
---------------------------- Captured stdout call -----------------------------
Data received from boundary: get_price
getting price...
Price found: Error fetching price: Invalid URL
Data saved to Excel file at ExportedFiles\excelFiles\check_availability.xlsx.
HTML file saved and updated at ExportedFiles\htmlFiles\check_availability.html.
------------------------------ Captured log call ------------------------------
INFO     root:unitTest_get_price.py:42 Control Layer Expected: Error fetching price: Invalid URL
INFO     root:unitTest_get_price.py:43 Control Layer Received: ('Error fetching price: Invalid URL', 'Data saved to Excel file at ExportedFiles\\excelFiles\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\htmlFiles\\check_availability.html.')
---------------------------- Captured log teardown ----------------------------
INFO     root:test_init.py:64 
Finished test: test_get_price_invalid_url
------------------------------------------------------
_____________________ test_start_monitoring_price_success _____________________

base_test_case = <MagicMock id='386142992'>

    async def test_start_monitoring_price_success(base_test_case):
        with patch('entity.PriceEntity.PriceEntity.get_price_from_page', return_value="100 USD") as mock_get_price:
    
            # Setup expected outcomes
            url = "https://example.com/product"
            expected_result = "Starting price monitoring. Current price: 100 USD"
    
            # Mocking the sleep method to break out of the loop after the first iteration
            with patch('asyncio.sleep', side_effect=KeyboardInterrupt):
                try:
                    # Execute the command
                    base_test_case.price_control.is_monitoring = False
                    result = await base_test_case.price_control.receive_command("start_monitoring_price", url, 1)
                except KeyboardInterrupt:
                    # Force the loop to stop after the first iteration
                    base_test_case.price_control.is_monitoring = False
    
            # Log and assert the outcomes
            logging.info(f"Entity Layer Expected: {expected_result}")
            logging.info(f"Control Layer Received: {base_test_case.price_control.results[0]}")
>           assert expected_result in base_test_case.price_control.results[0], "Price monitoring did not start as expected."
E           AssertionError: Price monitoring did not start as expected.
E           assert 'Starting price monitoring. Current price: 100 USD' in "Starting price monitoring. Current price: ('100 USD', 'Data saved to Excel file at ExportedFiles\\\\excelFiles\\\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\\\htmlFiles\\\\check_availability.html.')"

UnitTesting\unitTest_start_monitoring_price.py:31: AssertionError
----------------------------- Captured log setup ------------------------------
INFO     root:test_init.py:58 ------------------------------------------------------
Starting test: test_start_monitoring_price_success
---------------------------- Captured stdout call -----------------------------
Data received from boundary: start_monitoring_price
Configuration file not found. Using default settings.
Starting price monitoring...
getting price...
Price found: 100 USD
Data saved to Excel file at ExportedFiles\excelFiles\check_availability.xlsx.
HTML file saved and updated at ExportedFiles\htmlFiles\check_availability.html.
------------------------------ Captured log call ------------------------------
INFO     root:unitTest_start_monitoring_price.py:29 Entity Layer Expected: Starting price monitoring. Current price: 100 USD
INFO     root:unitTest_start_monitoring_price.py:30 Control Layer Received: Starting price monitoring. Current price: ('100 USD', 'Data saved to Excel file at ExportedFiles\\excelFiles\\check_availability.xlsx.', 'HTML file saved and updated at ExportedFiles\\htmlFiles\\check_availability.html.')
---------------------------- Captured log teardown ----------------------------
INFO     root:test_init.py:64 
Finished test: test_start_monitoring_price_success
------------------------------------------------------
=========================== short test summary info ===========================
FAILED UnitTesting/unitTest_check_availability.py::test_check_availability_success
FAILED UnitTesting/unitTest_check_availability.py::test_check_availability_failure_entity
FAILED UnitTesting/unitTest_check_availability.py::test_check_availability_no_availability
FAILED UnitTesting/unitTest_get_price.py::test_get_price_success - AssertionE...
FAILED UnitTesting/unitTest_get_price.py::test_get_price_invalid_url - Assert...
FAILED UnitTesting/unitTest_start_monitoring_price.py::test_start_monitoring_price_success
======================== 6 failed, 61 passed in 4.21s =========================
